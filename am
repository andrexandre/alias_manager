#!/bin/bash

script_shell_used=$(ps -cp "$$" -o command="")
script_filename=$(basename $0)
terminal_shell_used=$(ps -cp "$PPID" -o command="")
# if the shell that the script is using is not the same as the one
# terminal is using, run the script with the terminal's shell
[ "$script_shell_used" != "$terminal_shell_used" ] && exec "$terminal_shell_used" "$0" "$@"

shrc=$HOME/."$terminal_shell_used"rc
[ -d "$HOME/.local/bin" ] || mkdir -p "$HOME/.local/bin"
if ! echo "$PATH" | grep -q "$HOME/.local/bin" || \
	! grep -qF '[[ ":$PATH:" != *":$HOME/.local/bin:"* ]] && export PATH="$HOME/.local/bin:$PATH"' $shrc; then
	echo '# include ~/.local/bin in PATH' >> $shrc
	echo '[[ ":$PATH:" != *":$HOME/.local/bin:"* ]] && export PATH="$HOME/.local/bin:$PATH"' >> $shrc
fi
. $shrc

blue=27
yellow=220
primary=$yellow
secondary=$blue
update_styling_variables() {
	export FOREGROUND=$primary
	export BORDER_FOREGROUND=$secondary
	export GUM_CHOOSE_HEADER_FOREGROUND=$primary
	export GUM_CHOOSE_SELECTED_FOREGROUND=$secondary
	export GUM_CHOOSE_CURSOR_FOREGROUND=$secondary
	export GUM_CONFIRM_PROMPT_FOREGROUND=$primary
	export GUM_CONFIRM_SELECTED_BACKGROUND=$secondary
	export GUM_INPUT_PROMPT_FOREGROUND=$primary
	export GUM_INPUT_CURSOR_FOREGROUND=$secondary
	export GUM_PAGER_BORDER_FOREGROUND=$secondary
	export GUM_PAGER_MATCH_FOREGROUND=$primary
	export GUM_PAGER_MATCH_HIGH_BACKGROUND=$primary
	export GUM_FILTER_INDICATOR_FOREGROUND=$secondary
	export GUM_FILTER_MATCH_FOREGROUND=$primary
}
update_styling_variables

cmd_detection() {
	result_text=$(type "$2" 2>&1)
	case $result_text in
		*"not found"*)
			echo "not found"
			;;
		*"an alias for"*)
			echo "alias"
			;;
		*"shell function"*)
			echo "function"
			;;
		*"builtin"*|*"/"*)
			type "$2" >&2
			exit 1
			;;
		*)
			echo "What is that" >&2
			exit 1
			;;
	esac
}

create_alias(){
	if [ -z "$2" ]; then
		echo "Usage: am add NAME [COMMAND]"
		return
	fi
	result_type=$(cmd_detection "$@")
	if [ "$result_type" = "alias" ]; then
		echo alias already exists:
		command -v "$2"
	elif [ "$result_type" = "function" ]; then
		echo function already exists:
		which "$2"
	elif [ "$result_type" = "not found" ]; then
		if [ -z "$3" ]; then
			alias_command=$(gum input --placeholder "Alias '$2' will execute...")
			[ -z "$alias_command" ] && return
			echo "alias $2='$alias_command'" >> $shrc
		else
			echo "alias $2='$3'" >> $shrc
		fi
		. $shrc
	fi
}

read_alias(){
	if [ -z "$2" ]; then
		alias | grep --color=no -Ff - $shrc
		awk '/^[a-zA-Z_][a-zA-Z0-9_]*\s*\(\)\s*\{/{flag=1} flag; /\}/{flag=0}' $shrc
		return
	fi
	if [ "$2" = "-a" ]; then
		alias
		declare -f
		return
	fi
	if [ "$2" = "-f" ]; then
		alias | gum filter
		return
	fi
	result_type=$(cmd_detection "$@")
	if [ "$result_type" = "not found" ]; then
		alias | grep "$2" || declare -f | grep "$2" || echo "alias not found"
		return 1
	fi
	if [ "$result_type" = "alias" ]; then
		command -v "$2"
	elif [ "$result_type" = "function" ]; then
		which "$2"
	fi
}

update_alias(){
	if [ -z "$2" ]; then
		nano $shrc
		. $shrc
		return
	fi
	result_type=$(cmd_detection "$@")
	if [ "$result_type" = "not found" ]; then
		echo "alias '$2' not found"
		return 1
	fi
	if [ "$result_type" = "alias" ]; then
		if [ -z "$3" ]; then
			alias_old_command=$(grep -oP "alias $2='[^']*'" $shrc | sed "s/alias $2='//; s/'$//")
			alias_command=$(echo $alias_old_command | gum input --placeholder "$alias_old_command")
			[ -z "$alias_command" ] && return
			sed -i "/alias $2=/c\alias $2='$alias_command'" $shrc
		else
			sed -i "/alias $2=/c\alias $2='$3'" $shrc
		fi
		. $shrc
	elif [ "$result_type" = "function" ]; then
		echo "Use 'am edit' to edit functions"
		# if [ "$3" ]; then
		# 	echo Usage: ./am edit FUNCTION_NAME ; return
		# fi
		# alias_replaced=$(sed -n "/^$2 () {/,/^}/p" $shrc)
		# alias_replacement=$(echo $alias_replaced | gum write)
		# [ -z "$alias_replacement" ] && return
		# sed -i "s/$alias_replaced/$alias_replacement/g" $shrc
	fi
}

delete_alias(){
	if [ -z "$2" ]; then
		echo Usage: am rm NAME
		return
	fi
	result_type=$(cmd_detection "$@")
	if [ "$result_type" = "not found" ]; then
		echo "alias '$2' not found"
		return 1
	fi
	if [ "$result_type" = "alias" ]; then
		sed -i "/alias $2=/d" $shrc
	elif [ "$result_type" = "function" ]; then
		sed -i "/^$2() {/,/^}/d" $shrc
	fi
	. $shrc
}

setup_am() {
	if [ -f $HOME/.local/bin/am ]; then
		gum confirm "Do you want to remove alias manager?" || return
		rm $HOME/.local/bin/am
		echo "Alias manager removed successfully!"
		echo "To set up alias manager again run:"
		echo "git clone https://github.com/andrexandre/alias_manager ; ./alias_manager/am setup"
	else
		cp alias_manager/am $HOME/.local/bin
		rm -rf alias_manager
		echo Alias manager setup successfully!
		echo
		display_help
	fi
}

update_am() {
	if [ -f $HOME/.local/bin/am ]; then
		wget -q https://raw.githubusercontent.com/andrexandre/alias_manager/refs/heads/main/am
		if diff am $HOME/.local/bin/am &> /dev/null; then
			echo "Alias manager is already up to date"
		else
			echo "Updating alias manager..."
			sleep 3
			rm $HOME/.local/bin/am
			chmod +x am
			mv am $HOME/.local/bin
		fi
	else
		echo setup alias manager first
	fi 
}

display_help() {
		echo "Usage: am COMMAND

Alias and functions manager

Commands:
 add NAME [COMMAND]    Create alias
 ls [NAME/OPTION]      List alias
 edit [NAME] [COMMAND] Edit alias
 rm NAME               Remove alias"
}

# main
if ! command -v gum &> /dev/null; then
	if ! timeout 3 ping -c 1 google.com &> /dev/null; then
		echo "Bad internet connection" ; exit 1
	fi
	export list="test" ; curl -sL andrexandre.github.io | sh ; echo
fi
[ -z "$1" ] && display_help && return
case "$1" in
	add)
		create_alias "$@"
		;;
	ls)
		read_alias "$@"
		;;
	edit)
		update_alias "$@"
		;;
	rm)
		delete_alias "$@"
		;;
	setup)
		setup_am "$@"
		;;
	update)
		update_am "$@"
		;;
	*)
		echo "Invalid command: $1"
		echo
		display_help
		;;
esac
